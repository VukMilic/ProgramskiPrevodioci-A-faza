program MJCompiler
	const int con1=1;
	
	int i1, i2, i3[], i4[];
	char c1, c2;
{
	char k()
	{
		// tipovi u return naredbi se ne poklapaju
		return con1;
	}
	
	void main() int i5[][];
	{
		// koriscenje nepostojeceg simbola
		simbolError = i1 + i2;
		
		// operacija dodele pogresnih tipova
		i1 = c1;
		
		// dodela vrednosti konstanti
		con1 = 5;
		
		// operacija ++/-- nad tipom koji nije int
		c1++;
		
		// operacija ++/-- nad objektom koji nije promenljiva
		con1++;
		
		// operacije mnozenja i deljenja nad tipovima koji nisu int
		i1 = con1 * c1;
		
		// operacije sabiranja i oduzimanja nad tipovima koji nisu int
		i1 = 5 + c2;
		
		// kada se navede - (MINUS) ispred simbola koji nije int
		i1 = -c1;
		
		// break i continue se koriste izvan petlji
		break;
		continue;
		
		// read se poziva nad tipom koji nije int, char ili Bool
		read(i3);
		// pozivanje read-a nad konstantom
		read(con1);
		
		// print se poziva nad tipom koji nije int, char ili Bool
		print(i3);
		
		// uslov nije tipa Bool
		while( i1 )
			break;
		
		// prilikom poredjenja tipovi nisu kompatibilni
		if( i1>c1 )		
			i1 = i2;

		// poredjenje nizova sa losim relacionim simbol
		if(i3 > i4){
		}
		
		// prilikom alociranja niza, vrednost izmedju zagrada nije int
		i3 = new int['c'];
		
		// prilikom alociranja matrice, nepoklapanje tipova
		i5 = new char[1][2];
		
		// stavljamo zagrade na simbol koji nije niz
		i1 = i2[0];

	}
}